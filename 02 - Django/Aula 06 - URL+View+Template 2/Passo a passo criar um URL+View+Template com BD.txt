Passo a passo criar um URL+View+Template Versão Com BD

1- Crie um Projeto Django de nome "LojaVirtual" e crie um app chamado "produtos". Em models crie uma classe "Produto" e atribua a ela 2 propriedades. A primeira é "nome_produto" do tipo CharField para receber o nome do produto e a segunda é "valor_produto" do tipo DecimalField para receber o valor do produto.

2- Dentro da pasta do app crie uma pasta chamada "templates", entre nesta pasta criada e dentro dela crie uma pasta com o nome que você desejar, no exemplo será "produtos", dentro dessa pasta produtos crie um arquivo HTML e dê um nome a ele, no exemplo será "index.html".

3- Dentro desse arquivo HTML você vai construir sua pagina web em HTML. Um exemplo é o código abaixo:

<HTML>
    <BODY>
        <P>
            Minha lista de Produtos:
        </P>
        <ul>
                <li>Manteiga - R$ 10,25</li>
        </ul>
    </BODY>
</HTML>

4- Dentro da pasta do app abra o arquivo "views.py", nao é necessário importar uma nova biblioteca, somente vamos usar a render que ja se encontra importada por padrão no arquivo. Porém precisamos importar o arquivo models para poder trazer a class "Produto" criada nele.
	==> from .models import Produto

5- Ainda no arquivo "views.py", crie uma função com o nome que desejar, no caso será usado "ProdutosView", passando o objeto "request", pois ele contém informações sobre a solicitação HTTP feita pelo cliente ao servidor. E dentro da função coloque o comando para fazer uma busca no bando de dados do model criado de nome "Produto" e atribua o resultado dessa busca à uma variável que você criar, no exemplo será "produtos_lista". Na linha abaixo insira o comando "return" para retornar o comando "render" para renderizar a página HTML que foi criada anteriormente, dentro vai passar como parametros o objeto "request" que tinhamos colocado dentro dos parenteses da função no inicio, o endereço onde se encontra o html criado e um dicionário passando o resultado da busca no banco de dados:
	==> def ProdutosView(request):
    		produtos_lista = Produto.objects.all()
    		return render(request, 'produtos/index.html', {'produtos': produtos})

6- Voltando para o arquivo HTML criado de nome "index.html", agora precisamos isolar a parte do codigo HTML que será repetido quantas vezes for o número de objetos retornados da busca no banco de dados, ao final ele ficará assim:

<HTML>
    <BODY>
        <P>
            Minha lista de Produtos:
        </P>
        <ul>
            {% for produto in produtos %}
                <li>{{ produto }} - R$ {{ produto }}</li>
            {% endfor %}
        </ul>
    </BODY>
</HTML>

7- Na raiz do app criado, crie um novo arquivo e nomei-o como "urls.py", dentro dele você vai importar o comando "path" da biblioteca django.urls:
	==> from django.urls import path

8- Ainda no arquivo "urls.py", você também ira importar todo o arquivo "views.py" usando o seguinte importe:
	==> from . import views

9- Continuando no arquivo "urls.py", crie uma tupla usando o comando urlpatterns, e dentro dele registre o caminho usando o comando "path", dentro do path você passará 3 parâmetros, o primeiro é o que define a URL que o usuario vai acessar no navegador para poder abrir a página do HTML, a segunda é qual função dentro do arquivo views.py que você criou será executada, e a terceira será apenas um parâmetro opcional que da um nome a este path, você pode colcocar o que quiser, no exemplo usarei "lista_de_produtos":
	==> urlpatterns = [
    		path('lista-produtos/', views.ProdutosView, name='lista_de_produtos')
	    ]

10- Agora dentro da pasta do projeto, procure o arquivo "urls.py", nele procure a linha que está fazendo o seguinte importe "from django.urls import path". Ao final dele você vai acrescentar uma virgula e o comando "include", ficando dessa maneira:
	==> from django.urls import path, include

11- Ainda no arquivo "urls.py" do projeto, adicione um novo "path" à tupla "urlpatterns" já existente. Nesse path você vai colocar o nome do seu app para ficar como caminho inicial em seguida vai incluir o arquivo urls do seu app usando o comando include:
	==> path('produtos/', include('apps.produtos.urls')),
	
	no final ficará assim:
	==> urlpatterns = [
    			path('admin/', admin.site.urls),
    			path('produtos/', include('apps.produtos.urls'))
		]

12- Por fim, rode o makemigrations, depois o migrate, crie o superuser e suba o servidor com runserver. Depois vá ate o Django Admin e popule o banco de dados que você criou, depois acesse a url abaixo e verá a lista de produtos:
	==> "http://127.0.0.1:8000/produtos/lista-produtos/"